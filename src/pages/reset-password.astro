---
import Layout from "../layouts/Layout.astro";

const userId = Astro.url.searchParams.get("userId");
const secret = Astro.url.searchParams.get("secret");
const expire = Astro.url.searchParams.get("expire");

const isExpired = expire ? new Date(expire) < new Date() : false;
---

<Layout
  title="Reset Password - SparkPall"
  description="Reset your SparkPall password"
>
  <div class="auth-container reset-password-container">
    <img src="/images/app-icon.svg" alt="SparkPall Logo" class="app-icon" />
    <h1>Reset Your Password</h1>
    {
      isExpired ? (
        <p class="message error">
          This password reset link has expired. Please request a new password
          reset email.
        </p>
      ) : (
        <div id="resetContent">
          <p class="message">Create your new secure password:</p>
          <form id="passwordResetForm">
            <div class="input-group">
              <input
                type="password"
                name="password"
                required
                placeholder="New password"
              />
            </div>
            <div class="input-group">
              <input
                type="password"
                name="confirmPassword"
                required
                placeholder="Confirm new password"
              />
            </div>
            <p id="passwordMismatch" class="message error hidden">
              Passwords do not match
            </p>
            <button type="submit" class="btn secondary">
              Reset Password
            </button>
          </form>
        </div>
      )
    }
    <div id="resetSuccess" class="message success hidden">
      <p>Your password has been successfully reset.</p>
      <p>You can now log in to your account with your new password.</p>
    </div>
    <div id="openAppAfterReset" class="hidden">
      <button id="openAppBtnAfterReset" class="btn primary">
        <img src="/images/app-icon.svg" alt="" class="btn-icon" />
        Open SparkPall App
      </button>
    </div>
    <div id="resetError" class="message error hidden">
      <p>
        An error occurred while resetting your password. Please try again or
        contact support.
      </p>
    </div>
    <div id="loadingIndicator" class="loading hidden">
      <div class="spinner"></div>
      <p>Resetting your password...</p>
    </div>
  </div>
</Layout>

<script>
  const appScheme = "app.sparkpall.xyz://";
  const appStoreUrl = "https://apps.apple.com/us/app/sparkpall/id1610931185";
  const playStoreUrl =
    "https://play.google.com/store/apps/details?id=xyz.sparkpall.app";

  const urlParams = new URLSearchParams(window.location.search);
  const userId = urlParams.get("userId");
  const secret = urlParams.get("secret");
  const expire = urlParams.get("expire");

  function openApp() {
    const deepLink = `${appScheme}reset-password?userId=${userId}&secret=${secret}&expire=${expire}`;
    window.location.href = deepLink;

    setTimeout(() => {
      if (document.hidden) return;

      const isAndroid = /Android/i.test(navigator.userAgent);
      window.location.href = isAndroid ? playStoreUrl : appStoreUrl;
    }, 500);
  }

  document.getElementById("openAppBtn")?.addEventListener("click", openApp);
  document
    .getElementById("openAppBtnAfterReset")
    ?.addEventListener("click", openApp);

  const form = document.getElementById(
    "passwordResetForm"
  ) as HTMLFormElement | null;
  const passwordInput = form?.elements.namedItem(
    "password"
  ) as HTMLInputElement | null;
  const confirmPasswordInput = form?.elements.namedItem(
    "confirmPassword"
  ) as HTMLInputElement | null;

  const passwordMismatchMessage = document.getElementById("passwordMismatch");
  const resetContentEl = document.getElementById("resetContent");
  const loadingIndicatorEl = document.getElementById("loadingIndicator");
  const resetSuccessEl = document.getElementById("resetSuccess");
  const resetErrorEl = document.getElementById("resetError");
  const openAppAfterResetEl = document.getElementById("openAppAfterReset");

  function validatePasswords() {
    if (passwordInput && confirmPasswordInput) {
      if (passwordInput.value !== confirmPasswordInput.value) {
        passwordMismatchMessage?.classList.remove("hidden");
        return false;
      } else {
        passwordMismatchMessage?.classList.add("hidden");
        return true;
      }
    }
    return false;
  }

  passwordInput?.addEventListener("input", validatePasswords);
  confirmPasswordInput?.addEventListener("input", validatePasswords);

  form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    if (!validatePasswords()) {
      return;
    }

    const password = passwordInput?.value;

    if (!password) {
      return;
    }

    try {
      resetContentEl?.classList.add("hidden");
      loadingIndicatorEl?.classList.remove("hidden");

      const response = await fetch("/.netlify/functions/reset-password", {
        method: "POST",
        body: JSON.stringify({ userId, secret, password }),
        headers: {
          "Content-Type": "application/json",
        },
      });

      loadingIndicatorEl?.classList.add("hidden");

      if (response.ok) {
        resetSuccessEl?.classList.remove("hidden");
        resetSuccessEl?.scrollIntoView({ behavior: "smooth" });

        // Show the "Open SparkPall App" button after a delay
        setTimeout(() => {
          openAppAfterResetEl?.classList.remove("hidden");
          openAppAfterResetEl?.scrollIntoView({ behavior: "smooth" });
        }, 3000); // 3 seconds delay
      } else {
        throw new Error("Password reset failed");
      }
    } catch (error) {
      resetErrorEl?.classList.remove("hidden");
    }
  });
</script>
