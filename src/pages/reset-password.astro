---
import Layout from "../layouts/Layout.astro";

const userId = Astro.url.searchParams.get("userId");
const secret = Astro.url.searchParams.get("secret");
const expire = Astro.url.searchParams.get("expire");

const isExpired = expire ? new Date(expire) < new Date() : false;
---

<Layout
  title="Reset Password - SparkPall"
  description="Reset your SparkPall password"
>
  <div class="reset-password-container">
    <img src="/images/app-icon.svg" alt="SparkPall Logo" class="app-logo" />
    <h1>Reset Your Password</h1>
    {
      isExpired ? (
        <p class="message error">
          This password reset link has expired. Please request a new password
          reset email.
        </p>
      ) : (
        <div id="resetContent">
          <p class="message">Create your new secure password:</p>
          <div id="resetForm">
            <form id="passwordResetForm">
              <div class="input-group">
                <input
                  type="password"
                  name="password"
                  required
                  placeholder="New password"
                />
              </div>
              <div class="input-group">
                <input
                  type="password"
                  name="confirmPassword"
                  required
                  placeholder="Confirm new password"
                />
              </div>
              <p id="passwordMismatch" class="message error hidden">
                Passwords do not match
              </p>
              <button type="submit" class="btn secondary">
                Reset Password
              </button>
            </form>
          </div>
        </div>
      )
    }
    <div id="resetSuccess" class="message success hidden">
      <p>Your password has been successfully reset.</p>
      <p>You can now log in to your account with your new password.</p>
    </div>
    <div id="openAppAfterReset" class="hidden">
      <button id="openAppBtnAfterReset" class="btn primary">
        <img src="/images/app-icon.svg" alt="" class="btn-icon" />
        Open SparkPall App
      </button>
    </div>
    <div id="resetError" class="message error hidden">
      <p>
        An error occurred while resetting your password. Please try again or
        contact support.
      </p>
    </div>
    <div id="loadingIndicator" class="loading hidden">
      <div class="spinner"></div>
      <p>Resetting your password...</p>
    </div>
  </div>
</Layout>

<script>
  const appScheme = "sparkpall://";
  const appStoreUrl = "https://apps.apple.com/us/app/sparkpall/id1610931185";
  const playStoreUrl =
    "https://play.google.com/store/apps/details?id=xyz.sparkpall.app";

  const urlParams = new URLSearchParams(window.location.search);
  const userId = urlParams.get("userId");
  const secret = urlParams.get("secret");
  const expire = urlParams.get("expire");

  function openApp() {
    const deepLink = `${appScheme}reset-password?userId=${userId}&secret=${secret}&expire=${expire}`;
    window.location.href = deepLink;

    setTimeout(() => {
      if (document.hidden) return;

      const isAndroid = /Android/i.test(navigator.userAgent);
      window.location.href = isAndroid ? playStoreUrl : appStoreUrl;
    }, 500);
  }

  document.getElementById("openAppBtn")?.addEventListener("click", openApp);
  document
    .getElementById("openAppBtnAfterReset")
    ?.addEventListener("click", openApp);

  const form = document.getElementById(
    "passwordResetForm"
  ) as HTMLFormElement | null;
  const passwordInput = form?.elements.namedItem(
    "password"
  ) as HTMLInputElement | null;
  const confirmPasswordInput = form?.elements.namedItem(
    "confirmPassword"
  ) as HTMLInputElement | null;
  const passwordMismatchMessage = document.getElementById("passwordMismatch");
  const resetContentEl = document.getElementById("resetContent");
  const loadingIndicatorEl = document.getElementById("loadingIndicator");
  const resetSuccessEl = document.getElementById("resetSuccess");
  const resetErrorEl = document.getElementById("resetError");
  const openAppAfterResetEl = document.getElementById("openAppAfterReset");

  function validatePasswords() {
    if (passwordInput && confirmPasswordInput) {
      if (passwordInput.value !== confirmPasswordInput.value) {
        passwordMismatchMessage?.classList.remove("hidden");
        return false;
      } else {
        passwordMismatchMessage?.classList.add("hidden");
        return true;
      }
    }
    return false;
  }

  passwordInput?.addEventListener("input", validatePasswords);
  confirmPasswordInput?.addEventListener("input", validatePasswords);

  form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    if (!validatePasswords()) {
      return;
    }

    const password = passwordInput?.value;

    if (!password) {
      return;
    }

    try {
      if (resetContentEl) resetContentEl.classList.add("hidden");
      if (loadingIndicatorEl) loadingIndicatorEl.classList.remove("hidden");

      const response = await fetch("/.netlify/functions/reset-password", {
        method: "POST",
        body: JSON.stringify({ userId, secret, password }),
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (loadingIndicatorEl) loadingIndicatorEl.classList.add("hidden");

      if (response.ok) {
        if (resetSuccessEl) {
          resetSuccessEl.classList.remove("hidden");
          resetSuccessEl.scrollIntoView({ behavior: "smooth" });

          // Show the "Open SparkPall App" button after a delay
          setTimeout(() => {
            if (openAppAfterResetEl) {
              openAppAfterResetEl.classList.remove("hidden");
              openAppAfterResetEl.scrollIntoView({ behavior: "smooth" });
            }
          }, 3000); // 3 seconds delay
        }
      } else {
        throw new Error("Password reset failed");
      }
    } catch (error) {
      if (resetErrorEl) resetErrorEl.classList.remove("hidden");
    }
  });
</script>

<style>
  .reset-password-container {
    max-width: 400px;
    margin: 0 auto;
    padding: 2rem;
    text-align: center;
  }

  .app-logo {
    width: 80px;
    height: 80px;
    margin-bottom: 1rem;
  }

  h1 {
    font-size: 2em;
    font-weight: 900;
    margin-bottom: 1em;
    color: var(--primary);
  }

  .message {
    margin-bottom: 1rem;
    font-size: 0.875rem;
    line-height: 1.6;
  }

  .error {
    color: #ef4444;
  }
  .success {
    color: #ffff;
  }

  .input-group {
    margin-bottom: 1rem;
  }

  input[type="password"] {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--accent);
    border-radius: 50px;
    background-color: var(--background);
    color: var(--text);
    font-size: 1rem;
  }

  .btn {
    width: 100%;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 50px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1rem;
  }

  .btn.primary {
    background-color: var(--primary);
    color: var(--background);
  }

  .btn.primary:hover {
    background-color: #e0e0e0;
  }

  .btn.secondary {
    background-color: var(--accent);
    color: var(--text);
  }

  .btn.secondary:hover {
    background-color: #9a9a9a;
  }

  .btn-icon {
    width: 24px;
    height: 24px;
    margin-right: 10px;
  }

  .separator {
    margin: 1rem 0;
    font-size: 0.875rem;
    color: var(--text-secondary);
  }

  .loading {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .spinner {
    border: 4px solid var(--text-secondary);
    border-top: 4px solid var(--primary);
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .hidden {
    display: none;
  }

  #resetSuccess,
  #openAppAfterReset {
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
  }

  #resetSuccess p {
    margin-bottom: 0.5rem;
  }

  @media (max-width: 768px) {
    .reset-password-container {
      padding: 1rem;
    }

    h1 {
      font-size: 1.75em;
    }

    .btn,
    input[type="password"] {
      font-size: 0.875rem;
    }
  }
</style>
