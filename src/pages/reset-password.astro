---
import Layout from "../layouts/Layout.astro";

// Log the full URL for debugging
console.log("Full URL:", Astro.url.toString());

// Correctly parse the URL parameters
const userId = Astro.url.searchParams.get("userId");
const secret = Astro.url.searchParams.get("secret");
const expire = Astro.url.searchParams.get("expire");

// Log the parsed parameters
console.log("Parsed parameters:", { userId, secret, expire });
---

<Layout
  title="Reset Password - SparkPall"
  description="Reset your SparkPall password"
>
  <div class="container">
    <div class="card">
      <h1>Reset Your Password</h1>
      <div id="resetForm">
        <p class="message">Enter your new password below:</p>
        <form id="passwordResetForm">
          <input
            type="password"
            name="password"
            required
            placeholder="New password"
          />
          <input
            type="password"
            name="confirmPassword"
            required
            placeholder="Confirm new password"
          />
          <p id="passwordMismatch" class="message error" style="display: none;">
            Passwords do not match
          </p>
          <button type="submit" class="btn primary">Reset Password</button>
        </form>
      </div>
      <div id="resetSuccess" class="message success" style="display: none;">
        <p>
          Your password has been successfully reset. You can now log in with
          your new password.
        </p>
      </div>
      <div id="resetError" class="message error" style="display: none;">
        <p>
          An error occurred while resetting your password. Please try again or
          contact support.
        </p>
      </div>
      <p class="separator">Or</p>
      <button id="openAppBtn" class="btn secondary">Open SparkPall App</button>
    </div>
  </div>

  <script>
    // Retrieve parameters from the current URL
    const urlParams = new URLSearchParams(window.location.search);
    const userId = urlParams.get("userId");
    const secret = urlParams.get("secret");
    const expire = urlParams.get("expire");

    console.log("Client-side parameters:", { userId, secret, expire });

    const appScheme = "sparkpall://";
    const appStoreUrl = "https://apps.apple.com/us/app/sparkpall/id1610931185";
    const playStoreUrl =
      "https://play.google.com/store/apps/details?id=xyz.sparkpall.app";

    function openApp() {
      const deepLink = `${appScheme}reset-password?userId=${userId}&secret=${secret}&expire=${expire}`;
      window.location.href = deepLink;
    }

    const openAppBtn = document.getElementById("openAppBtn");
    if (openAppBtn) {
      openAppBtn.addEventListener("click", openApp);
    }

    const form = document.getElementById(
      "passwordResetForm"
    ) as HTMLFormElement;
    if (!form) {
      console.error("Form not found");
      throw new Error("Form not found");
    }

    const passwordInput = form.elements.namedItem(
      "password"
    ) as HTMLInputElement;
    const confirmPasswordInput = form.elements.namedItem(
      "confirmPassword"
    ) as HTMLInputElement;
    const passwordMismatchMessage = document.getElementById("passwordMismatch");

    if (!passwordInput || !confirmPasswordInput || !passwordMismatchMessage) {
      console.error("Required elements not found");
      throw new Error("Required elements not found");
    }

    function validatePasswords() {
      if (passwordInput.value !== confirmPasswordInput.value) {
        passwordMismatchMessage.style.display = "block";
        return false;
      } else {
        passwordMismatchMessage.style.display = "none";
        return true;
      }
    }

    passwordInput.addEventListener("input", validatePasswords);
    confirmPasswordInput.addEventListener("input", validatePasswords);

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      if (!validatePasswords()) {
        return;
      }

      const password = passwordInput.value;

      try {
        console.log("Sending reset request with:", {
          userId,
          secret,
          password: "******",
        });
        const response = await fetch("/.netlify/functions/reset-password", {
          method: "POST",
          body: JSON.stringify({ userId, secret, password }),
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          const resetFormEl = document.getElementById("resetForm");
          const resetSuccessEl = document.getElementById("resetSuccess");
          if (resetFormEl && resetSuccessEl) {
            resetFormEl.style.display = "none";
            resetSuccessEl.style.display = "block";
          }
        } else {
          const errorData = await response.json();
          console.error("Reset failed:", errorData);
          throw new Error(errorData.message || "Password reset failed");
        }
      } catch (error) {
        console.error("Error:", error);
        const resetFormEl = document.getElementById("resetForm");
        const resetErrorEl = document.getElementById("resetError");
        if (resetFormEl && resetErrorEl) {
          resetFormEl.style.display = "none";
          resetErrorEl.style.display = "block";
        }
      }
    });
  </script>

  <style>
    :root {
      --primary-color: #4caf50;
      --secondary-color: #2196f3;
      --error-color: #f44336;
      --success-color: #4caf50;
      --background-color: #f0f0f0;
      --card-background: #ffffff;
      --text-color: #333333;
    }

    body {
      font-family: Arial, sans-serif;
      background-color: var(--background-color);
      color: var(--text-color);
      margin: 0;
      padding: 0;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .container {
      width: 100%;
      max-width: 400px;
      padding: 2rem;
    }

    .card {
      background-color: var(--card-background);
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      padding: 2rem;
      text-align: center;
    }

    h1 {
      margin-top: 0;
      color: var(--primary-color);
    }

    .message {
      margin-bottom: 1rem;
    }

    .error {
      color: var(--error-color);
    }

    .success {
      color: var(--success-color);
    }

    .btn {
      border: none;
      border-radius: 4px;
      color: white;
      cursor: pointer;
      font-size: 1rem;
      padding: 0.75rem 1.5rem;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      margin: 0.5rem 0;
      transition: background-color 0.3s;
    }

    .btn.primary {
      background-color: var(--primary-color);
    }

    .btn.primary:hover {
      background-color: #45a049;
    }

    .btn.secondary {
      background-color: var(--secondary-color);
    }

    .btn.secondary:hover {
      background-color: #1e88e5;
    }

    .separator {
      margin: 1rem 0;
      font-style: italic;
      color: #666;
    }

    input[type="password"] {
      width: 100%;
      padding: 0.75rem;
      margin: 0.5rem 0;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
      font-size: 1rem;
    }
  </style>
</Layout>
