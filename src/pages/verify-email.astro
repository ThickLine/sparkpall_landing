---
import Layout from "../layouts/Layout.astro";

const userId = Astro.url.searchParams.get("userId");
const secret = Astro.url.searchParams.get("secret");
const expire = Astro.url.searchParams.get("expire");

const isExpired = expire ? new Date(expire) < new Date() : false;

console.log("Parsed parameters:", { userId, secret, expire, isExpired });
---

<Layout
  title="Verify Email - SparkPall"
  description="Verify your SparkPall email address"
>
  <div class="auth-container verify-email-container">
    <img src="/images/app-icon.svg" alt="SparkPall Logo" class="app-icon" />
    <h1>Verify Your Email</h1>
    {
      isExpired ? (
        <p class="message error">
          This verification link has expired. Please request a new verification
          email.
        </p>
      ) : (
        <div id="verificationContent">
          <p class="message">
            Tap the button below to verify your email address:
          </p>
          <button id="verifyEmailBtn" class="btn secondary">
            Verify in Browser
          </button>
        </div>
      )
    }
    <div id="verificationSuccess" class="message success hidden">
      <p>
        Your email has been successfully verified. You can now use all features
        of your account.
      </p>
      <button id="openAppAfterVerification" class="btn primary">
        <img src="/images/app-icon.svg" alt="" class="btn-icon" />
        Open SparkPall App
      </button>
    </div>
    <div id="verificationError" class="message error hidden">
      <p>
        An error occurred while verifying your email. Please try again or
        contact support.
      </p>
    </div>
    <div id="loadingIndicator" class="loading hidden">
      <div class="spinner"></div>
      <p>Verifying your email...</p>
    </div>
  </div>
</Layout>

<script>
  const appScheme = "app.sparkpall.xyz://";
  const appStoreUrl = "https://apps.apple.com/us/app/sparkpall/id1610931185";
  const playStoreUrl =
    "https://play.google.com/store/apps/details?id=xyz.sparkpall.app";

  const urlParams = new URLSearchParams(window.location.search);
  const userId = urlParams.get("userId");
  const secret = urlParams.get("secret");
  const expire = urlParams.get("expire");

  console.log("Client-side parameters:", { userId, secret, expire });

  function openApp() {
    const deepLink = `${appScheme}email-verification?userId=${userId}&secret=${secret}&expire=${expire}`;
    window.location.href = deepLink;

    setTimeout(() => {
      if (document.hidden) return;

      const isAndroid = /Android/i.test(navigator.userAgent);
      window.location.href = isAndroid ? playStoreUrl : appStoreUrl;
    }, 500);
  }

  document.getElementById("openAppBtn")?.addEventListener("click", openApp);
  document
    .getElementById("openAppAfterVerification")
    ?.addEventListener("click", openApp);

  if (userId && secret) {
    document
      .getElementById("verifyEmailBtn")
      ?.addEventListener("click", async () => {
        try {
          document
            .getElementById("verificationContent")
            .classList.add("hidden");
          document
            .getElementById("loadingIndicator")
            .classList.remove("hidden");

          console.log("Sending verification request with:", { userId, secret });
          const response = await fetch("/.netlify/functions/verify-email", {
            method: "POST",
            body: JSON.stringify({ userId, secret }),
            headers: {
              "Content-Type": "application/json",
            },
          });

          document.getElementById("loadingIndicator").classList.add("hidden");

          if (response.ok) {
            document
              .getElementById("verificationSuccess")
              .classList.remove("hidden");
          } else {
            const errorData = await response.json();
            console.error("Verification failed:", errorData);
            throw new Error(errorData.message || "Email verification failed");
          }
        } catch (error) {
          console.error("Error:", error);
          document
            .getElementById("verificationError")
            .classList.remove("hidden");
        }
      });
  } else {
    console.error("Missing userId or secret", { userId, secret });
    document.getElementById("verificationContent").classList.add("hidden");
    document.getElementById("verificationError").classList.remove("hidden");
  }
</script>
