---
import Layout from "../layouts/Layout.astro";

// Log the full URL for debugging
console.log("Full URL:", Astro.url.toString());

// Correctly parse the URL parameters
const userId = Astro.url.searchParams.get("userId");
const secret = Astro.url.searchParams.get("secret");
const expire = Astro.url.searchParams.get("expire");

// Log the parsed parameters
console.log("Parsed parameters:", { userId, secret, expire });

// We'll consider the link as not expired since we're using server time
const isExpired = false;
---

<Layout
  title="Verify Email - SparkPall"
  description="Verify your SparkPall email address"
>
  <div class="container">
    <div class="card">
      <h1>Verify Your Email</h1>
      {
        isExpired ? (
          <p class="message error">
            This verification link has expired. Please request a new
            verification email.
          </p>
        ) : (
          <div id="verificationContent">
            <p class="message">
              Click the button below to verify your email address:
            </p>
            <button id="verifyEmailBtn" class="btn primary">
              Verify Email
            </button>
          </div>
        )
      }
      <div
        id="verificationSuccess"
        class="message success"
        style="display: none;"
      >
        <p>
          Your email has been successfully verified. You can now use all
          features of your account.
        </p>
      </div>
      <div id="verificationError" class="message error" style="display: none;">
        <p>
          An error occurred while verifying your email. Please try again or
          contact support.
        </p>
      </div>
      <p class="separator">Or</p>
      <button id="openAppBtn" class="btn secondary">Open SparkPall App</button>
    </div>
  </div>

  <script>
    // Retrieve parameters from the current URL
    const urlParams = new URLSearchParams(window.location.search);
    const userId = urlParams.get("userId");
    const secret = urlParams.get("secret");
    const expire = urlParams.get("expire");

    console.log("Client-side parameters:", { userId, secret, expire });

    const appScheme = "sparkpall://";
    const appStoreUrl = "https://apps.apple.com/us/app/sparkpall/id1610931185";
    const playStoreUrl =
      "https://play.google.com/store/apps/details?id=xyz.sparkpall.app";

    function openApp() {
      const deepLink = `${appScheme}email-verification?userId=${userId}&secret=${secret}&expire=${expire}`;
      window.location.href = deepLink;
    }

    document.getElementById("openAppBtn").addEventListener("click", openApp);

    if (userId && secret) {
      document
        .getElementById("verifyEmailBtn")
        .addEventListener("click", async () => {
          try {
            console.log("Sending verification request with:", {
              userId,
              secret,
            });
            const response = await fetch("/.netlify/functions/verify-email", {
              method: "POST",
              body: JSON.stringify({ userId, secret }),
              headers: {
                "Content-Type": "application/json",
              },
            });

            if (response.ok) {
              document.getElementById("verificationContent").style.display =
                "none";
              document.getElementById("verificationSuccess").style.display =
                "block";
            } else {
              const errorData = await response.json();
              console.error("Verification failed:", errorData);
              throw new Error(errorData.message || "Email verification failed");
            }
          } catch (error) {
            console.error("Error:", error);
            document.getElementById("verificationContent").style.display =
              "none";
            document.getElementById("verificationError").style.display =
              "block";
          }
        });
    } else {
      console.error("Missing userId or secret", { userId, secret });
      document.getElementById("verificationContent").style.display = "none";
      document.getElementById("verificationError").style.display = "block";
    }
  </script>

  <style>
    :root {
      --primary-color: #4caf50;
      --secondary-color: #2196f3;
      --error-color: #f44336;
      --success-color: #4caf50;
      --background-color: #f0f0f0;
      --card-background: #ffffff;
      --text-color: #333333;
    }

    body {
      font-family: Arial, sans-serif;
      background-color: var(--background-color);
      color: var(--text-color);
      margin: 0;
      padding: 0;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .container {
      width: 100%;
      max-width: 400px;
      padding: 2rem;
    }

    .card {
      background-color: var(--card-background);
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      padding: 2rem;
      text-align: center;
    }

    h1 {
      margin-top: 0;
      color: var(--primary-color);
    }

    .message {
      margin-bottom: 1rem;
    }

    .error {
      color: var(--error-color);
    }

    .success {
      color: var(--success-color);
    }

    .btn {
      border: none;
      border-radius: 4px;
      color: white;
      cursor: pointer;
      font-size: 1rem;
      padding: 0.75rem 1.5rem;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      margin: 0.5rem 0;
      transition: background-color 0.3s;
    }

    .btn.primary {
      background-color: var(--primary-color);
    }

    .btn.primary:hover {
      background-color: #45a049;
    }

    .btn.secondary {
      background-color: var(--secondary-color);
    }

    .btn.secondary:hover {
      background-color: #1e88e5;
    }

    .separator {
      margin: 1rem 0;
      font-style: italic;
      color: #666;
    }
  </style>
</Layout>
